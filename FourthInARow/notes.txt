quelques réflexions sur le jeu

Jeu à 1 ou 2

Si jeu à 1, joue contre :
niveau 7 : le plus fort => R2-D2 bien sûr ! (contre lui, on ne peut que faire match nul au mieux)
niveau 6 : plutôt bon => BB-8
niveau 5 : pervers => BB-9E
niveau 4 : avec la force => Yoda
niveau 3 :
niveau 2 : 
niveau 1 : le plus faible => Jar Jar Binks (totalement aléatoire, voir joue pour aider l'adversaire)

prévoir une aide pour le joueur => lui montrer un bon coup à jouer ou une case à jouer pour contrer

en mode "économiseur d'écran", ça peut être IA contre IA.


Si jeu à 2, chacun choisit son joueur :
Joueur 1 : Luc
Joueur 2 : Poe
Joueur 3 : Leia
Joueur 4 : 
Joueur 5 : 
Joueur 6 : 
Joueur 7 : 

hum... plutôt choisir un camp genre rebel, empire, chasseur de prime, etc... avec une banque sonore correspondante... à construire...


** DEV

Comment implémenter un composant hardware
Créer la class C++ correspondante, qui hérite des call standard mise à disposition :
Pour gérer des entrées utilisateurs : GameInput
Pour gérer une sorties visuelles du jeu : GameOutput
Pour gérer du son : GameOutputAudio
Ces class contiennent le fonctionnement "à vide", sans composant hardware.

Pour intégrer votre hardware, il faut surcharger les fonctions qui vous sont utiles pour votre hardware.

Il y a la fonction "setup()" qui sert à initialiser votre composant. C'est appeler une seule fois.
Puis il y a la fonction classique "loop()" qui est exécutée en permanence. Si nécessaire, à la place, vous pouvez utiliser "startLoop()" qui est appelé au début de la boucle loop() et "endLoop()" qui est appelé à la fin de la boucle "loop()".

Détail de GameInput
Cela sert à prendre en compte les actions de l'utilisateur.
L'action qui est attendue est de renseigner la variable "input" de type inputAction (voirGlobal.h).

Détail pour GameOutput
Cette class sert à montrer des choses aux joueurs.
Si avec votre hardware vous devez dessinez le plateau de jeu, il faut implémenter la fonction "drawGrid()".
Pour effacer les cases (vider les pions), il faut implémenter "clearTiles()".
Pour dessiner un pion, il faut implémenter "setTiles(CaseLocation location, Player token)" : location contient la ligne et la colonne, player correspond à joueur.
Ou alors, vous pouvez simplement implémenter la fonction "drawBoard(Column board[BOARD_COLUMNS]" et vous redessinez l'ensemble du plateau de jeu à chaque fois. 1 colonne comprenant les 6 cases correspondantes.

Détail pour GameOutputAudio
Cette class à pour but de gérer la carte son et de jouer du bruitage/son.
Pour la gestion, vous avez les fonctions :
volumeUp()
volumeDown()
setVolume(uint8_t value)
getVolume()
muteOn()
muteOff()
+ de nombreuses fonctions pour jouer du son à divers moment du jeu. (voir le fichier GameOutputAudio.hpp pour le détail)


HUZZAH32
seulement en input
X A2/I34, X A3/I39, X A4/36 (A13/I35 mais n'est pas exposé)
seulement en output
A11/I12
input et output
X A0/I26, X A1/I25, X A5/I4, XI21
A12/I13 (+red led), X A11/I12, X A10/I27, X A9/I33, X A8/I15, X A7/I32, X A6/I14


Dossier sons carte SD pour DFPlayer Mini
folder					#files
01 : power on			2
02 : push button bad	4
03 : push button good	7
04 : start game			4
05 : IA thinking		10
06 : player could loose 9
07 : player could win	12
08 : player will loose	9
09 : game loose			7
10 : game win			5

sur Mac, ne pas oublier de nettoyer la carte SD avec : dot_clean /Volumes/<SDVolumeName>
